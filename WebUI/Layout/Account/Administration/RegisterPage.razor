@page "/administration/account/identity/add-user"
@using Application.DTOs.Response.Account
<div class="row">
    <div class="col-lg-4">
        <EditForm Model="RegisterModel" OnValidSubmit="RegisterAsync">
            <div class="card border-primary shadow-lg text-dark p-5" style="opacity: 0.8; min-width: 350px; border-radius: 24px">
                <div class="card-header text-dark fs-4 border-primary">Add User</div>
                <div class="card-body" style="opacity: 1">
                    <DataAnnotationsValidator />
                    <FloatingText class="form-control mb-3" Label="Full Name" Placeholder="Madnix" @bind-Value="RegisterModel.Name"/>
                    <FloatingText class="form-control mb-3" Label="Email Address" Placeholder="madnix2033@gmail.com" @bind-Value="RegisterModel.EmailAddress"/>
                    <label class="form-label">Select Role</label>
                    <InputSelect @bind-Value="RegisterModel.Role" class="form-select mb-3">
                        <option>Select Role</option>
                        @if (AvailableRoles != null)
                        {
                            foreach (var role in AvailableRoles)
                            {
                                <option value="@role.Name">@role.Name</option>
                            }
                        }
                    </InputSelect>
                    <FloatingText Label="User Password" Type="@PasswordType" class="form-control" @bind-Value="RegisterModel.Password"/>
                    <FloatingText Label="Confirm Password" Type="@PasswordType" class="form-control" @bind-Value="RegisterModel.ConfirmPassword"/>
                    <a class="btn btn-link text-decoration-none float-end" style="margin-top: -20px" @onclick="ChangePasswordType"><small>@DisplayText</small></a>
                    <div class="form-control align-content-end">
                        <button class="float-end btn btn-success mt-4 w-50" type="submit" style="position: absolute; right: 0; margin: 2px">Create Account</button>
                    </div>
                    
                    <hr class="text-primary"/>
                </div>
                
                <div class="card-footer mt-5">
                    <ValidationSummary class="form-control text-danger text-decoration-none p-4" style="list-style: lower-latin; text-align: left"/>
                </div>
            </div>
        </EditForm>
    </div>
    <div class="col-lg-4"></div>
</div>
<NetcodeHubModal @bind-Value="IsOpen" Actions="ButtonActions" BootstrapClass="@BorderClass" CustomStyle="min-width: 250px; max-width: 300px">
    <ContentTemplate>
        <span class="text-center text-muted">
            <div class="card border-@BorderClass">
                <div class="card-header">Information</div>
                <div class="card-body text-muted"> @Message</div>
            </div>
        </span>
    </ContentTemplate>
    
    <ButtonTemplate>
        <div class="d-flex justify-content-center align-content-center">
            <button class="@ButtonClass btn-sm" value="ok" style="margin-right: 5px">Okay</button>
        </div>
    </ButtonTemplate>
</NetcodeHubModal>
@code {
    public string? SelectedAction { get; set; }
    public CreateAccountDto RegisterModel { get; set; } = new();
    private bool IsOpen { get; set; }
    private string? Message { get; set; }
    private bool IsOperationSuccess { get; set; }
    private string? BorderClass { get; set; } = "border-success rounded p-2 ml-2 mr-2";
    private string? ButtonClass { get; set; } = "btn btn-success";
    private IEnumerable<GetRoleDto>? AvailableRoles { get; set; }

    protected override async Task OnInitializedAsync()
        => AvailableRoles = await AccountService.GetRolesAsync();

    private async Task RegisterAsync()
    {
        try
        {
            ResetButtons();
            var response = await AccountService.RegisterAccountAsync(RegisterModel);
            if (response is { Flag: true })
            {
                IsOperationSuccess = true;
                SuccessBorderAndButton();
                Message = response.Message;
            }
            else
            {
                IsOperationSuccess = false;
                Message = response?.Message;
                DangerBorderAndButton();
            }

            IsOpen = true;
        }
        catch
        {
            DangerBorderAndButton();
            Message = "Sorry, unknown error occured";
            IsOpen = true;
        }
    }

    private void SuccessBorderAndButton()
    {
        BorderClass = "border-success rounded p-2 ml-2 mr-2";
        ButtonClass = "btn btn-success";
    }
    
    private void DangerBorderAndButton()
    {
        BorderClass = "border-danger rounded p-2 ml-2 mr-2";
        ButtonClass = "btn btn-danger";
    }

    private void ResetButtons()
    {
        BorderClass = "border-success rounded p-2 ml-2 mr-2";
        ButtonClass = "btn btn-success";
    }

    private void ButtonActions(string action)
    {
        SelectedAction = action;
        if (action != "ok") return;
        IsOpen = false;
        if (IsOperationSuccess)
            RegisterModel = new CreateAccountDto();
    }

    private string? PasswordType { get; set; } = "password";
    private bool PasswordState { get; set; } = true;
    private string? DisplayText { get; set; } = "Show";

    private void ChangePasswordType()
    {
        PasswordState = !PasswordState;
        if (!PasswordState)
        {
            PasswordType = "text";
            DisplayText = "Hide";
        }
        else
        {
            PasswordType = "password";
            DisplayText = "Show";
        }
    }
}